{"version":3,"sources":["api.ts","actions/requests.ts","redusers/requests.ts","redusers/index.ts","store/configureStore.ts","components/DrawRepository/DrawRepository.tsx","components/Buttons/Buttons.tsx","App.tsx","index.tsx"],"names":["requestUrl","checkStatus","response","status","Error","statusText","getRepository","subject","page","url","method","body","options","JSON","stringify","fetch","then","json","request","concat","getRepositoriesPending","createStandardAction","getRepositoriesSuccess","getRepositoriesError","getRepositories","dispatch","results","catch","error","message","resetStateAction","resetState","initialState","repositories","total_count","isloading","rootReducer","combineReducers","requests","state","arguments","length","undefined","action","type","getType","actions","Object","objectSpread","payload","items","map","item","id","name","html_url","stargazers_count","watchers","store","createStore","composeWithDevTools","applyMiddleware","thunk","DrawRepositories","renderRepository","_this","props","react_default","a","createElement","key","className","target","href","this","Fragment","PureComponent","connect","Buttons","selectPageFetchRequested","debounce","handlePageClick","e","selected","dist_default","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeLinkClassName","previousLinkClassName","nextLinkClassName","pageLinkClassName","breakLinkClassName","pageClassName","activeClassName","bindActionCreators","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","q","handleInputChange","persist","setState","value","onChange","placeholder","components_Buttons_Buttons","DrawRepository_DrawRepository","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a7d6474a.chunk.js","sourcesContent":["import { Repositories } from \"./interfaces\";\n\nconst requestUrl =\n  \"https://api.github.com/search/repositories?q=\";\n\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  throw new Error(\"Server error: \" + response.statusText);\n}\n\nfunction request<R extends object>(\n  url: string,\n  method: string,\n  body?: object\n): Promise<R> {\n  const options: any = {\n    method\n  };\n\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  return fetch(requestUrl + url, options)\n    .then(checkStatus)\n    .then(response => response.json());\n}\n\nexport function getRepository(subject: string, page: number) {\n  return request<Repositories>(`${subject}&page=${page}`, \"GET\");\n}\n","import { Dispatch } from \"redux\";\nimport { createStandardAction } from 'typesafe-actions';\nimport {\n  getRepository,\n} from \"../api\";\nimport { Repositories } from \"../interfaces\";\n\nexport const getRepositoriesPending = createStandardAction('GET_REPOSITORIES_REQUEST')<void>();\nexport const getRepositoriesSuccess = createStandardAction('GET_REPOSITORIES_SUCCESS')<Repositories>();\nexport const getRepositoriesError = createStandardAction('GET_REPOSITORIES_ERROR')<string>();\n\n\nexport function getRepositories(subject: string, page: number) {\n  return (dispatch: Dispatch<any>) => {\n    if (subject === '') {\n      return {}\n    }\n    dispatch(getRepositoriesPending());\n    return getRepository(subject, page)\n      .then(results => {\n        dispatch(getRepositoriesSuccess(results));\n      })\n      .catch((error: Error) => {\n        dispatch(getRepositoriesError(error.message));\n        throw error;\n      });\n  };\n}\n\nexport const resetStateAction = createStandardAction('RESET_STATE')<void>();\n\nexport function resetState() {\n  return (dispatch: Dispatch<any>) => {\n    dispatch(resetStateAction());\n  };\n}\n","import { Repository } from \"../interfaces\";\nimport * as actions from \"../actions/requests\";\n\nimport { getType, ActionType } from \"typesafe-actions\";\n\ntype IAction = ActionType<typeof actions>;\n\ntype IInitialState = {\n  repositories: Repository[];\n  total_count: number;\n  isloading: boolean;\n  error: string | null;\n};\n\nconst initialState: IInitialState = {\n  repositories: [],\n  total_count: 0,\n  isloading: false,\n  error: null\n};\n\nexport default function reducer(\n  state: IInitialState = initialState,\n  action: IAction\n): IInitialState {\n  switch (action.type) {\n    case getType(actions.getRepositoriesPending):\n      return { ...state, isloading: true };\n    case getType(actions.getRepositoriesSuccess):\n      return {\n        ...state, total_count: action.payload.total_count,\n        repositories: action.payload.items.map((item: Repository) => {\n          return {\n            id: item.id,\n            name: item.name,\n            html_url: item.html_url,\n            stargazers_count: item.stargazers_count,\n            watchers: item.watchers\n          }\n        }),\n        isloading: false,\n      };\n    case getType(actions.getRepositoriesError):\n      return { ...state, isloading: false, error: action.payload };\n    case getType(actions.resetStateAction):\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport requests from \"./requests\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  requests: requests\r\n});\r\nexport type IAppState = ReturnType<typeof rootReducer>;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"../redusers/index\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Repository } from '../../interfaces';\r\nimport { IAppState } from '../../redusers/index';\r\nimport './DrawRepository.scss';\r\n\r\n\r\ninterface OwnProps { }\r\ntype Props = OwnProps & StateFromProps;\r\n\r\nclass DrawRepositories extends PureComponent<Props>{\r\n    renderRepository = () => {\r\n        const { repositories } = this.props;\r\n        if (repositories.length) {\r\n            return repositories.map((item: Repository) => (\r\n                <div key={item.id} className=\"repository\">\r\n                    <a target=\"blank\" href={item.html_url} className=\"repository__link\">{item.name}</a>\r\n                    <p>Количество звезд: {item.stargazers_count}</p>\r\n                    <p>Количество подписчиков: {item.watchers}</p>\r\n                </div>\r\n            ));\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { total_count } = this.props;\r\n        return (<>\r\n            <p>Всего репозиториев: {total_count}</p>\r\n            {this.renderRepository()}</>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IAppState) => {\r\n    return {\r\n        total_count: state.requests.total_count,\r\n        repositories: state.requests.repositories\r\n    };\r\n};\r\n\r\ntype StateFromProps = ReturnType<typeof mapStateToProps>;\r\n\r\nexport default connect(mapStateToProps)(DrawRepositories);\r\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { IAppState } from '../../redusers/index';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { getRepositories } from '../../actions/requests';\nimport { debounce } from 'throttle-debounce';\nimport ReactPaginate from 'react-paginate';\nimport './Buttons.scss';\n\ninterface OwnProps {\n  subject?: string;\n}\ntype Props = OwnProps & StateFromProps & DispatchFromProps;\n\nclass Buttons extends PureComponent<Props>{\n\n  selectPageFetchRequested = debounce(1000, (subject: string, page: number) => {\n    this.props.getRepositories(subject, page);\n  });\n\n  handlePageClick = (e: any) => {\n    const { subject } = this.props;\n    if (this.props.subject) {\n      this.selectPageFetchRequested(this.props.subject, e.selected + 1)\n    };\n  }\n\n  render() {\n    const { total_count } = this.props;\n    return (\n      <>\n        {total_count ?\n          <ReactPaginate\n            previousLabel={'previous'}\n            nextLabel={'next'}\n            breakLabel={'...'}\n            breakClassName={'break-me'}\n            pageCount={total_count / 30}\n            marginPagesDisplayed={1}\n            pageRangeDisplayed={5}\n            onPageChange={this.handlePageClick}\n            containerClassName={'pagination'}\n            activeLinkClassName={'pagination__link'}\n            previousLinkClassName={'pagination__link'}\n            nextLinkClassName={'pagination__link'}\n            pageLinkClassName={'pagination__link'}\n            breakLinkClassName={'pagination__link'}\n            pageClassName={'pagination'}\n            activeClassName={'pagination__active'}\n          /> :\n          null\n        }\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  getRepositories,\n}, dispatch)\n\nconst mapStateToProps = (state: IAppState) => {\n  return {\n    total_count: state.requests.total_count,\n  };\n};\n\ntype DispatchFromProps = ReturnType<typeof mapDispatchToProps>;\ntype StateFromProps = ReturnType<typeof mapStateToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { getRepositories, resetState } from './actions/requests';\nimport { debounce } from 'throttle-debounce';\nimport DrawRepository from './components/DrawRepository/DrawRepository';\nimport Buttons from './components/Buttons/Buttons';\nimport './App.scss';\n\ninterface OwnProps { }\ntype Props = OwnProps & DispatchFromProps;\n\ninterface State {\n  subject?: string;\n}\n\nclass App extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      subject: '',\n    };\n  }\n\n  onSuggestionsFetchRequested = debounce(1000, (q: string) => {\n    this.props.getRepositories(q, 1);\n  });\n\n  componentDidUpdate() {\n    if (this.state.subject) {\n      this.onSuggestionsFetchRequested(this.state.subject);\n    }\n    if (this.state.subject === '') {\n      this.props.resetState()\n      this.onSuggestionsFetchRequested('');\n    }\n  }\n\n  handleInputChange = (e: React.ChangeEvent<HTMLInputElement> & React.SyntheticEvent): void => {\n    e.persist();\n    this.setState((state) => ({ subject: e.target.value }));\n  }\n\n\n  render() {\n    const { subject } = this.state;\n    return (\n      <div className='app'>\n        <input\n          type='text'\n          onChange={this.handleInputChange}\n          className='app__subject'\n          value={subject}\n          placeholder='Введите название репозитория'\n        />\n        <Buttons subject={this.state.subject} />\n        <DrawRepository />\n      </div>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  getRepositories,\n  resetState\n}, dispatch)\n\ntype DispatchFromProps = ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(null, mapDispatchToProps)(App);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/configureStore';\nimport App from './App';\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n"],"sourceRoot":""}